{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Deck/FormatDeck.js","Layout/DeckList.js","Layout/Deck/DisplayDeck.js","Layout/Deck/Card/FormatCard.js","Layout/Deck/Card/CardList.js","Layout/Deck/Card/CardForm.js","Layout/Deck/Card/EditCard.js","Layout/Deck/Card/AddCard.js","Layout/Deck/EditDeck.js","Layout/Deck/Card/NextButton.js","Layout/Deck/Card/StudyCard.js","Layout/Deck/StudyDeck.js","Layout/Deck/ViewDeck.js","Layout/Deck/CreateDeckForm.js","Layout/Deck/AddDeck.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","FormatDeck","decks","setDecks","history","useHistory","numberOfCards","length","to","onClick","event","abortController","AbortController","preventDefault","window","confirm","then","tempDecks","filter","theDeck","push","catch","log","abort","DeckList","useState","undefined","setError","useEffect","deckList","map","append","DisplayDeck","description","filteredDecks","FormatCard","front","back","setDeck","useRouteMatch","deleteCard","filteredCards","aCard","CardList","setCards","importedCards","sort","cardA","cardB","cardList","index","CardForm","deckUrl","formData","setFormData","edit","setEdit","tempDeck","urlComponents","split","readingTheCard","handleChange","target","value","onSubmit","itemsToSubmit","operativeFunction","aDeck","handlingTheSubmit","htmlFor","type","placeholder","onChange","EditCard","useParams","class","AddCard","EditDeck","path","temporaryDeck","setTemporaryDeck","handleSubmit","updatedDecks","NextButton","setIsFlipped","cardNumber","setCardNumber","setIsVisible","StudyCard","isFlipped","isVisible","areCards","displayedContent","StudyDeck","deckPath","ViewDeck","readDeck","CreateDeckForm","initializeForm","newDeck","setNewDeck","newDecks","createDeck","AddDeck","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c89f8150.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport { deleteDeck } from \"../../utils/api\";\n\nexport default function FormatDeck({deck, decks, setDecks}) {\n    const history = useHistory();\n\n    let numberOfCards = 0;\n    if(deck.cards) numberOfCards = deck.cards.length;\n\n    // delete handler for the delete button for the deck\n    /* must receive user input from modal\n    * then setDecks to what decks were minus the deckToDelete\n    * then take us to home screen */\n    const handleDelete =  (event) => {\n        const abortController = new AbortController();\n        event.preventDefault();\n        if (window.confirm(\"You sure you want to delete Deck?\")) {\n        deleteDeck(deck.id, abortController.signal)\n            .then((response) => {\n            const tempDecks = decks.filter((theDeck) => theDeck.id !== deck.id);\n            setDecks(() => tempDecks);\n            history.push(`/`);\n            })\n            .catch(console.log(\"Bad magnitude 10\"));\n        }\n\n        return () => abortController.abort();\n    }\n    \n\n    return (\n        <div className=\"card mb-3 \">\n            <div className=\"card-body\">\n                <div className=\"d-flex  justify-content-between \">\n                    <h5 className=\"card-title\">{deck.name}</h5>\n                        <small> {numberOfCards} {numberOfCards === 1 ? \"card\": \"cards\"}</small>\n                </div>\n\n                <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-1 oi oi-eye\">\n                    View\n                </Link>\n\n                <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary ml-1 oi oi-book\">\n                    Study\n                </Link>\n\n                <button className=\"btn btn-danger float-right oi oi-trash\" onClick={handleDelete} >\n                    Delete\n                </button>\n\n            </div>\n        </div>\n        );\n}","import React, { useEffect, useState } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {listDecks} from './../utils/api/index';\nimport FormatDeck from './Deck/FormatDeck';\n\nexport default function DeckList({decks, setDecks}){\n  const [error, setError] = useState(undefined);\n\n    //make sure that the decks are up to date\n    useEffect(() => {\n      const abortController = new AbortController();\n      listDecks(abortController.signal).then(setDecks).catch(setError);\n      return () => abortController.abort(); \n    }, [setDecks])\n\n    if(error) {throw error};\n\n  let deckList = decks.map((deck) => <FormatDeck deck={deck} decks={decks} setDecks={setDecks} />);\n\n    return (\n        <div className=\"home\">\n            <Link to=\"/decks/new\" className=\"btn btn-secondary oi oi-plus\">\n                Create Deck\n            </Link>\n            <div>\n            {deckList}\n            </div>\n        </div>\n    )\n}\n","//meant to be for displaying deck on the ViewDeck screen\nimport React from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport {deleteDeck} from \"../../utils/api/index\";\n\nexport default function DisplayDeck({deck, decks, setDecks, url}) {\n    const history = useHistory();\n    function handleClick(event) {\n        const abortController = new AbortController();\n        event.preventDefault();\n        if (window.confirm(\"You sure you want to delete Deck?\")) {\n        deleteDeck(deck.id, abortController.signal)\n            .then((response) => {\n            const filteredDecks = decks.filter((theDeck) => theDeck.id !== deck.id);\n            setDecks(() => filteredDecks);\n            history.push(`/`);\n            })\n            .catch(console.error);\n        }\n\n    return () => abortController.abort();\n  }\n  return (\n    <div className=\"card  border-0\">\n      <div className=\"card-body px-0\">\n        <div className=\"d-flex  justify-content-between \">\n          <h5 className=\"card-title\">{deck.name}</h5>\n        </div>\n        <p>{deck.description}</p>\n\n        <Link to={`${url}/edit`} className=\"btn btn-secondary mr-1 oi oi-pencil\">\n          Edit\n        </Link>\n\n        <Link to={`${url}/study`} className=\"btn btn-primary ml-1 oi oi-book\">\n          Study\n        </Link>\n\n        <Link to={`${url}/cards/new`} className=\"btn btn-primary ml-2 oi oi-plus\">\n          Add Cards\n        </Link>\n\n        <button className=\"btn btn-danger float-right oi oi-trash\" onClick={handleClick}></button>\n\n      </div>\n    </div>\n  );\n}","//meant to format the display of cards when on ViewDeck\nimport React from \"react\";\nimport {Link, useRouteMatch} from \"react-router-dom\";\nimport {deleteCard} from \"../../../utils/api/index\";\n\nexport default function FormatCard({card:{id, front, back}, deck, setDeck}){\n    const {url} = useRouteMatch();\n    const handleDelete = (event) => {\n        const abortController = new AbortController();\n        if (window.confirm(\"Delete this card?\")) {\n            deleteCard(abortController.signal)\n            .then(() => {\n                const filteredCards = deck.cards.filter((aCard) => aCard.id !== id);\n                setDeck({...deck, cards: filteredCards})\n            }).catch((error) => {throw error});\n            return () => abortController.abort();    \n        }\n    }\n\n    return (\n        <div className=\"card container\">\n            <div className=\"d-flex row \">\n                <div className=\"col-6\">\n                    <p>{front}</p>\n                </div>\n                <div className=\"col-6\">\n                    <p>{back}</p>\n                </div>\n            </div>\n            <div className=\" float-right text-right\">\n                <Link to={`${url}/cards/${id}/edit`} className=\"btn btn-secondary ml-1 oi oi-pencil\">\n                    Edit\n                </Link>\n                <button className=\"btn btn-danger float-right oi oi-trash ml-3\" onClick={handleDelete}></button>\n            </div>\n         </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport FormatCard from \"./FormatCard\";\n\nexport default function CardList({deck, setDeck, cards, setCards}){\n\n    //called to ensure that the cards being used in the card list are set to the specified deck's cards\n    useEffect(() => {\n        const abortController = new AbortController();\n        if(deck.cards){\n            const importedCards = deck.cards;\n            importedCards.sort((cardA, cardB) => cardA.id - cardB.id);\n            setCards([...importedCards]);\n        }\n        return () => abortController.abort();\n    }, [deck, setCards]);\n\n    const cardList = cards.map((card, index) => \n        <FormatCard card={card} deck={deck} setDeck={setDeck} />\n    )\n\n    return (\n        <div>\n            <h2>Cards</h2>\n            {cardList}\n        </div>\n    )\n}","import React, {useState, useEffect} from \"react\";\nimport {Link, useHistory, useRouteMatch} from \"react-router-dom\";\nimport {updateCard, createCard, readCard} from \"../../../utils/api/index\";\n\nexport default function CardForm({\n    deck,\n    setDeck,\n    decks,\n    setDecks,\n    deckUrl\n}){\n    const history = useHistory();\n    const {url} = useRouteMatch();\n    const [formData, setFormData] = useState(\n        {front:\"\", back:\"\"}\n    )\n    const [edit, setEdit] = useState(false);\n\n    const tempDeck = deck;\n    let tempDecks = decks;\n\n    //tracking whether this form is to be used in EditCard or AddCard\n    const urlComponents = url.split('/');\n    useEffect(() => {\n        if(urlComponents[urlComponents.length - 1] === \"edit\"){\n            setEdit(true);\n            const abortController = new AbortController();\n            const readingTheCard = async () => {\n                try {\n                    const response = await readCard(urlComponents[urlComponents.length - 2], abortController.signal);\n                    setFormData(response);\n                } catch(error) {throw error}\n            }\n            readingTheCard();\n            return () => abortController.abort();\n        }\n    }, []);\n\n    const handleChange = ({target}) => {\n        setFormData(() => ({\n            ...formData,\n            [target.name]:target.value\n        }))\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const abortController = new AbortController();\n        let itemsToSubmit = [deck.id, formData, abortController.signal];\n        let operativeFunction = createCard;\n        if(edit){\n            itemsToSubmit = [deck.id, formData, abortController.signal];\n            operativeFunction = updateCard;\n        }\n        const handlingTheSubmit = async () => {\n            try {\n                const response = await operativeFunction(...itemsToSubmit);\n\n                //replaces the card that was operated on from the temp deck with the post-op version\n                tempDeck.cards = tempDeck.cards.filter((card) => card.id !== response.id);\n                tempDeck.cards.push(response);\n                setDeck({...tempDeck})\n                \n                //replaces the old version of the deck in the decks array with the new version\n                tempDecks = tempDecks.filter((aDeck) => aDeck.id !== deck.id);\n                tempDecks.push(tempDeck);\n                setDecks([...tempDecks]);\n\n                if(!edit) setFormData({front:\"\", back:\"\"});\n                else history.push(deckUrl);\n            } catch (error) {\n                if(error === \"AbortError\") console.log(\"aborted handlingTheSubmit\");\n                else throw error;\n            }\n        }\n        handlingTheSubmit();\n        return () => abortController.abort();\n    }\n\n    return (\n        <form name=\"createDeck\" onSubmit={handleSubmit}>\n          <div className=\"front\">\n            <label htmlFor=\"front\">Front</label>\n            <textarea\n              id=\"front\"\n              type=\"text\"\n              name=\"front\"\n              value={formData.front}\n              placeholder=\"Front side of card\"\n              className=\"form-control\"\n              onChange={handleChange}\n            ></textarea>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"back\">Back</label>\n            <textarea\n              id=\"back\"\n              type=\"text\"\n              name=\"back\"\n              value={formData.back}\n              placeholder=\"Back Side of card\"\n              className=\"form-control\"\n              onChange={handleChange}\n            ></textarea>\n          </div>\n          <Link className=\"btn btn-secondary mr-1\" to={deckUrl}>\n            Done\n          </Link>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      );\n\n}","import React from \"react\";\nimport {useParams, Link} from \"react-router-dom\";\nimport CardForm from \"./CardForm\";\n\nexport default function EditCard({\n    deck,\n    setDeck,\n    decks,\n    setDecks,\n    deckUrl\n}){\n    {/* Breadcrumb to be inserted into return */}\n    const {cardId} = useParams();\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                    <li class=\"breadcrumb-item\"><Link to='/' className=\"oi oi-home\">Home</Link></li>\n                    <li class=\"breadcrumb-item\"><Link to={deckUrl}>{deck.name}</Link></li>\n                    <li class=\"breadcrumb-item active\" aria-current=\"edit-card\">Edit Card {cardId}</li>\n                </ol>\n            </nav>\n            <h2>Edit Card</h2>\n            <CardForm \n                deck={deck}\n                setDeck={setDeck}\n                decks={decks}\n                setDecks={setDecks}\n                deckUrl={deckUrl} />\n        </div>\n    )\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport CardForm from \"./CardForm\";\n\nexport default function AddCard({\n    deck,\n    setDeck,\n    decks,\n    setDecks,\n    deckUrl\n}){\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to='/' className=\"oi oi-home\">Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={deckUrl}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"add-card\">Add Card</li>\n                </ol>\n            </nav>\n            <h2>{deck.name}: Add Card</h2>\n            <CardForm \n                deck={deck}\n                setDeck={setDeck}\n                decks={decks}\n                setDecks={setDecks}\n                deckUrl={deckUrl} />\n        </div>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport {Link, useHistory, useParams, useRouteMatch} from \"react-router-dom\";\nimport {updateDeck, listDecks} from '../../utils/api/index';\n \nexport default function EditDeck({deck, setDeck, setDecks, deckUrl}) {\n    const history = useHistory();\n    const {deckId} = useParams();\n    const {path} = useRouteMatch();\n    \n\n    const [formData, setFormData] = useState({\n        name: deck.name,\n        description: deck.description,\n        id: deckId, \n    })\n\n    //links the temp deck to the formdata\n    const [temporaryDeck, setTemporaryDeck] = useState({\n        name: formData.name,\n        description: formData.description,\n        id: formData.id,\n    });\n\n    //changes the form data as the form input fields are used\n    const handleChange = ({target}) => setFormData({...formData, [target.name] : target.value});\n\n    //will update the fomr data whenever there is a change to the deck in question\n    useEffect(() => {\n        setFormData({\n            name: deck.name,\n            description: deck.description,\n            id: deckId, \n        })\n    }, [deck]);\n\n    //will update the temp deck whenever the formData changes\n    useEffect(() => {\n        setTemporaryDeck({\n            name: formData.name,\n            description: formData.description,\n            id: formData.id,\n        })\n    }, [formData]);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const abortController = new window.AbortController();\n        try{\n            const response = await updateDeck(temporaryDeck, abortController.signal);\n            setDeck({...deck, ...temporaryDeck});\n            let updatedDecks = await listDecks(abortController.signal);\n            setDecks({...updatedDecks});\n            history.push(deckUrl);\n        } catch (error) {\n            if(error === \"AbortError\") console.log(\"aborted handleSubmit\");\n            else throw error;\n        }\n        return () => abortController.abort();\n    }\n\n    return (\n    <div>\n        <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to='/' className=\"oi oi-home\">Home</Link></li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"edit-deck\">Edit Deck</li>\n                </ol>\n            </nav>\n        <h2>Edit Deck</h2>\n        <form name=\"editDeck\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    id=\"name\"\n                    type=\"text\"\n                    name=\"name\"\n                    onChange={handleChange}\n                    value={formData.name}\n                    className=\"form-control\"\n                    />\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"description\">Description </label>\n                <textarea\n                    id=\"description\"\n                    type=\"text\"\n                    name=\"description\"\n                    value={formData.description}\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    ></textarea>\n            </div>\n            <Link className=\"btn btn-secondary mr-1\" to={`${deckUrl}`}>\n                Cancel\n            </Link>\n            <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n            </button>\n        </form>\n    </div>\n  );\n}","//component to handle the \"Next button\" for StudyCard in Study Deck\nimport React from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function NextButton({ \n    setIsFlipped,\n    length,\n    cardNumber,\n    setCardNumber,\n    setIsVisible}) {\n        const history = useHistory();\n\n        const handleClick = (event) => {\n            if (cardNumber < length - 1) {\n                setCardNumber(cardNumber + 1);\n                setIsFlipped(false);\n                setIsVisible(false);\n            } else if (window.confirm(\"Restart cards?\")) {\n                setCardNumber(0);\n                setIsVisible(false);\n            } else history.push(\"/\");      \n        }\n\n        return (\n            <button className=\"btn btn-primary ml-1 oi oi-arrow-thick-right\" onClick={handleClick}>\n                Next\n            </button>\n        )\n}","//meant to be used to study a card in StudyDeck\nimport React, {useState} from \"react\";\nimport NextButton from \"./NextButton\";\n\nexport default function StudyCard({cards}) {\n    const [cardNumber, setCardNumber] = useState(0);\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [isVisible, setIsVisible] = useState(false);\n    const areCards = cards.length !== 0;\n\n    let displayedContent = \"\";\n    const handleClick = () => {\n        setIsFlipped(!isFlipped);\n        setIsVisible(!isVisible);\n    }\n\n    if(isFlipped && areCards) displayedContent = cards[cardNumber].back;\n    else if(areCards) displayedContent = cards[cardNumber].front;\n\n    if(areCards){\n        return (\n            <div className=\"card mb-3\">\n                <div className=\"card-body\">\n                    <div className=\"d-flex  justify-content-between \">\n                        <h5 className=\"card-title\">{`Card ${cardNumber + 1} of ${cards.length}`}</h5>\n                    </div>\n                    <p>{displayedContent}</p>\n                    <button className=\"btn btn-secondary ml-1 oi oi-arrow-thick-top\" onClick={handleClick}>\n                        Flip\n                    </button>\n                    {isVisible ? (\n                        <NextButton\n                            setIsFlipped={setIsFlipped}\n                            length={cards.length}\n                            cardNumber={cardNumber}\n                            setCardNumber={setCardNumber}\n                            setIsVisible={setIsVisible}\n                        />\n                    ) : null}\n                </div>\n            </div>\n        )\n\n\n    } else return null;\n    \n}","import React, {useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport StudyCard from './Card/StudyCard';\n\nexport default function StudyDeck({deck, deckPath, cards}){\n\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                    <li class=\"breadcrumb-item\"><Link to='/' className=\"oi oi-home\">Home</Link></li>\n                    <li class=\"breadcrumb-item\"><Link to={deckPath}>{deck.name}</Link></li>\n                    <li class=\"breadcrumb-item active\" aria-current=\"study-deck\">Study</li>\n                </ol>\n            </nav>\n            <h2>{deck.name}: Study</h2>\n            {cards.length < 2 ? (\n                <div>\n                    <h3>Not Enough Cards.</h3>\n                    <p> You need at least 3 cards to study. There are {cards.length} cards in\n                    this deck</p>\n              </div>\n            ):(\n                <StudyCard cards={cards} />\n            )} \n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport {useParams, Switch, Route, Link, useRouteMatch} from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport DisplayDeck from './DisplayDeck';\nimport CardList from './Card/CardList';\nimport EditCard from './Card/EditCard';\nimport AddCard from './Card/AddCard';\nimport EditDeck from './EditDeck';\nimport StudyDeck from './StudyDeck';\n\n\n\nexport default function ViewDeck({decks, setDecks}) {\n    const {deckId} = useParams();\n    const {path, url} = useRouteMatch();\n    const [deck, setDeck] = useState({});\n    const [cards, setCards] = useState([]);\n\n    {/* Breadcrumb to integrate into return */}\n\n    //initialize the deck state using the relevant parameter\n    useEffect(() => {\n        const abortController = new window.AbortController();\n        readDeck(deckId, abortController.signal)\n        .then(setDeck)\n        .then(() => {\n          if(deck.cards) setCards([...deck.cards]);\n        })\n        .catch((error) => {throw error});\n        return () => abortController.abort();\n    }, []);\n\n    useEffect(() => {\n      if (deck.cards !== undefined) setCards([...deck.cards]);\n    }, [deck]);  \n\n    return (\n        <div>\n      <Switch>\n        <Route path={`${path}/cards/:cardId/edit`}>\n          <EditCard\n            decks={decks}\n            deck={deck}\n            setDeck={setDeck}\n            deckUrl={url}\n            setDecks={setDecks}\n          />\n        </Route>\n        <Route path={`${path}/cards/new`}>\n          <AddCard\n            decks={decks}\n            deck={deck}\n            setDeck={setDeck}\n            deckUrl={url}\n            setDecks={setDecks}\n            cards={cards}\n            setCards={setCards}\n          />\n        </Route>\n        <Route path={`${path}/edit`}>\n          <EditDeck\n            deck={deck}\n            setDeck={setDeck}\n            setDecks={setDecks}\n            deckUrl={url}\n          />\n        </Route>\n        <Route path={`${path}/study`}>\n          <StudyDeck decks={decks} deck={deck} cards={cards} deckPath={path} />\n        </Route>\n        <Route path={`${path}`}>\n          <nav aria-label=\"breadcrumb\">\n                  <ol className=\"breadcrumb\">\n                      <li className=\"breadcrumb-item\"><Link to='/' className=\"oi oi-home\">Home</Link></li>\n                      <li className=\"breadcrumb-item active\" aria-current=\"view-deck\">{deck.name}</li>\n                  </ol>\n              </nav>\n\n          <DisplayDeck deck={deck} url={url} decks={decks} setDecks={setDecks} />\n          <CardList\n            deck={deck}\n            setDeck={setDeck}\n            cards={cards}\n            setCards={setCards}\n          />\n        </Route>\n      </Switch>\n    </div>\n    )\n\n\n\n}","import React, { useEffect, useState } from \"react\";\nimport {useHistory, Link} from \"react-router-dom\"\nimport { createDeck } from \"../../utils/api\";\n\nexport default function CreateDeckForm({decks, setDecks}) {\n    const history = useHistory();\n    let initializeForm = {\n        name:\"\",\n        description:\"\",\n    }\n    \n    const [formData, setFormData] = useState({...initializeForm});\n    const [newDeck, setNewDeck] = useState({\n        name: formData.name,\n        description: formData.description,\n    });\n  const [error, setError] = useState(undefined);\n\n\n    //whenever there is a change to either name or description fields, formData values are updated\n    const handleChange = ({target}) => {\n      setFormData({...formData, [target.name]: target.value});\n    }\n  \n    //update the newDeck every time the formData changes\n    useEffect(() => {setNewDeck({...formData, name: formData.name, description: formData.description})}, [formData]);\n\n    let newDecks = decks;\n    const handleSubmit =  (event) => {\n        event.preventDefault();\n        const abortController = new AbortController();\n      createDeck(newDeck, abortController.signal)\n       .then((response) => {\n        newDecks.push(response);\n        setDecks(() => newDecks);\n        setFormData({...initializeForm});\n        history.push(`/decks/${response.id}`);\n      })\n      .catch(console.log(error));\n        return () => abortController.abort();\n    }\n\n    return (\n        <div>\n        <h2>Create Deck</h2>\n        <form name=\"createDeck\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    id=\"name\"\n                    type=\"text\"\n                    name=\"name\"\n                    onChange={handleChange}\n                    value={formData.name}\n                    placeholder=\"Deck Name\"\n                    className=\"form-control\"\n                    />\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                    id=\"description\"\n                    type=\"text\"\n                    name=\"description\"\n                    value={formData.description}\n                    placeholder=\"Brief description of the deck\"\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    ></textarea>\n            </div>\n            <Link to='/' className=\"btn btn-secondary mr-1\" >\n                Cancel\n            </Link>\n            <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n            </button>\n        </form>\n        </div>\n    )\n\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport CreateDeckForm from './CreateDeckForm';\n\nexport default function AddDeck({decks, setDecks}) {\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ul className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\">\n                      <Link to='/' className=\"oi oi-home\">Home</Link>\n                  </li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"create-deck\">Create Deck</li>\n                </ul>\n            </nav>\n            <CreateDeckForm decks={decks} setDecks={setDecks}  />\n        </div>\n    )\n}\n","import React, {useState} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DeckList from './DeckList';\nimport ViewDeck from './Deck/ViewDeck';\nimport AddDeck from './Deck/AddDeck';\n\n\nfunction Layout() {\n  const [decks, setDecks] = useState([]);\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          \n          <Route exact path='/'>\n            <DeckList decks={decks} setDecks={setDecks}/>\n          </Route>\n          \n          <Route path='/decks/new'>\n            <AddDeck decks={decks} setDecks={setDecks}/>\n          </Route>\n\n          <Route path='/decks/:deckId'>\n            <ViewDeck decks={decks} setDecks={setDecks}/>\n          </Route>\n\n          <Route path=\"*\">\n            <NotFound />\n          </Route>\n\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}